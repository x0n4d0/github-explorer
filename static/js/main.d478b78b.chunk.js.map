{"version":3,"sources":["assets/github-background.svg","styles/global.ts","services/api.ts","assets/logo.svg","pages/Dashboard/styles.ts","pages/Dashboard/index.tsx","pages/Repository/styles.ts","pages/Repository/index.tsx","routes/index.tsx","App.tsx","index.tsx"],"names":["createGlobalStyle","githubBackground","api","axios","create","baseURL","Title","styled","h1","Form","form","props","hasError","css","Repositories","div","Error","span","Dashboard","useState","newRepo","setNewRepo","inputError","setInputError","storagedRepositories","localStorage","getItem","JSON","parse","repositories","setRepositories","event","a","preventDefault","get","response","repository","data","useEffect","setItem","stringify","src","logoImg","alt","onSubmit","value","onChange","target","placeholder","type","map","to","full_name","owner","avatar_url","login","description","size","Header","header","RepositoryInfo","section","Issues","Label","color","Repository","setRepository","issues","setIssues","params","useRouteMatch","then","stargazers_count","forks_count","open_issues_count","issue","href","html_url","title","user","labels","label","name","id","Routes","path","exact","component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kMAAe,MAA0B,8C,oxBCI1BA,kBAAf,IAsB8CC,G,gECxBjCC,E,OAAMC,EAAMC,OAAO,CAC9BC,QAAS,2BCHI,MAA0B,iC,o/DCMlC,IAAMC,EAAQC,IAAOC,GAAV,KAQLC,EAAOF,IAAOG,KAAV,KAgBX,SAAAC,GAAK,OACLA,EAAMC,UACNC,YADA,QAyBOC,EAAeP,IAAOQ,IAAV,KAoDZC,EAAQT,IAAOU,KAAV,KCzFLC,EAAsB,WAAO,IAAD,EACTC,mBAAS,IADA,mBAChCC,EADgC,KACvBC,EADuB,OAEHF,mBAAS,IAFN,mBAEhCG,EAFgC,KAEpBC,EAFoB,OAGCJ,oBAAuB,WAC7D,IAAMK,EAAuBC,aAAaC,QACxC,gCAGF,OAAIF,EACKG,KAAKC,MAAMJ,GAEb,MAX8B,mBAGhCK,EAHgC,KAGlBC,EAHkB,iDAqBvC,WACEC,GADF,iBAAAC,EAAA,yDAGED,EAAME,iBACDb,EAJP,uBAKIG,EAAc,yCALlB,mDAU2BrB,EAAIgC,IAAJ,iBAA8Bd,IAVzD,OAUUe,EAVV,OAYUC,EAAaD,EAASE,KAE5BP,EAAgB,GAAD,mBAAKD,GAAL,CAAmBO,KAClCf,EAAW,IACXE,EAAc,IAhBlB,kDAkBIA,EAAc,yCAlBlB,2DArBuC,sBA2CvC,OA7BAe,qBAAU,WACRb,aAAac,QACX,+BACAZ,KAAKa,UAAUX,MAEhB,CAACA,IAyBF,qCACE,qBAAKY,IAAKC,EAASC,IAAI,oBACvB,cAACrC,EAAD,0DAEA,eAACG,EAAD,CAAMG,WAAYU,EAAYsB,SAhDK,4CAgDnC,UACE,uBACEC,MAAOzB,EACP0B,SAAU,SAAAf,GAAK,OAAIV,EAAWU,EAAMgB,OAAOF,QAC3CG,YAAY,kCACZC,KAAK,SAEP,wBAAQA,KAAK,SAAb,0BAGD3B,GAAc,cAACN,EAAD,UAAQM,IAEvB,cAACR,EAAD,UACGe,EAAaqB,KAAI,SAAAd,GAAU,OAC1B,eAAC,IAAD,CAEEe,GAAE,wBAAmBf,EAAWgB,WAFlC,UAIE,qBACEX,IAAKL,EAAWiB,MAAMC,WACtBX,IAAKP,EAAWiB,MAAME,QAExB,gCACE,iCAASnB,EAAWgB,YACpB,4BAAIhB,EAAWoB,iBAGjB,cAAC,IAAD,CAAgBC,KAAM,OAZjBrB,EAAWgB,oB,w4EChFrB,IAAMM,EAASnD,IAAOoD,OAAV,KAsBNC,EAAiBrD,IAAOsD,QAAV,KAsDdC,EAASvD,IAAOQ,IAAV,KAkDNgD,EAAQxD,IAAOQ,IAAV,KASI,SAAAJ,GAAK,iBAAQA,EAAMqD,UCjG5BC,EAAuB,WAAM,MAEJ9C,mBAA4B,MAFxB,mBAEjCiB,EAFiC,KAErB8B,EAFqB,OAGZ/C,mBAAkB,IAHN,mBAGjCgD,EAHiC,KAGzBC,EAHyB,KAKhCC,EAAWC,cAAXD,OAYR,OAVA/B,qBAAU,WACRpC,EAAIgC,IAAJ,iBAAkBmC,EAAOjC,aAAcmC,MAAK,SAAApC,GAC1C+B,EAAc/B,EAASE,SAGzBnC,EAAIgC,IAAJ,iBAAkBmC,EAAOjC,WAAzB,YAA8CmC,MAAK,SAAApC,GACjDiC,EAAUjC,EAASE,WAEpB,CAACgC,EAAOjC,aAGT,qCACE,eAACsB,EAAD,WACE,qBAAKjB,IAAKC,EAASC,IAAI,oBACvB,eAAC,IAAD,CAAMQ,GAAG,IAAT,UACE,cAAC,IAAD,CAAeM,KAAM,KADvB,eAMDrB,EACC,eAACwB,EAAD,WACE,mCACE,qBACEnB,IAAKL,EAAWiB,MAAMC,WACtBX,IAAKP,EAAWiB,MAAME,QAExB,gCACE,iCAASnB,EAAWgB,YACpB,4BAAIhB,EAAWoB,oBAGnB,+BACE,+BACE,iCAASpB,EAAWoC,mBACpB,6CAEF,+BACE,iCAASpC,EAAWqC,cACpB,4CAEF,+BACE,iCAASrC,EAAWsC,oBACpB,2DAKN,8CAGF,cAACZ,EAAD,UACGK,EAAOjB,KAAI,SAAAyB,GAAK,OACf,oBAAkBC,KAAMD,EAAME,SAAU9B,OAAO,UAA/C,UACE,gCACE,iCAAS4B,EAAMG,QACf,4BAAIH,EAAMI,KAAKxB,WAEhBoB,EAAMK,OAAO9B,KAAI,SAAA+B,GAAK,OACrB,cAAClB,EAAD,CAAOC,MAAOiB,EAAMjB,MAApB,SACE,+BAAOiB,EAAMC,YAGjB,cAAC,IAAD,CAAgBzB,KAAM,OAVhBkB,EAAMQ,aC9FXC,EAAmB,kBAC9B,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWrE,IACjC,cAAC,IAAD,CAAOmE,KAAK,6BAA6BC,OAAK,EAACC,UAAWtB,QCHjDuB,EAAgB,kBAC3B,qCACE,cAAC,EAAD,IACA,cAAC,IAAD,UACE,cAAC,EAAD,UCNNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.d478b78b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/github-background.cef25cd4.svg\";","import { createGlobalStyle } from 'styled-components';\n\nimport githubBackground from '../assets/github-background.svg';\n\nexport default createGlobalStyle`\n  :root {\n    --white-color: #fff;\n    --background-color: #f0f0f5;\n    --light-color: #cbcbd6;\n    --medium-color: #a8a8b3;\n    --dark-color: #3d3d4d;\n    --darker-color: #3a3a3a;\n    --error-color: #c53030;\n\n    --button-form-color: #04D361;\n    --button-form-color-hover: #04BA56;\n  }\n\n  * {\n    margin: 0;\n    padding: 0;\n    outline: 0;\n    box-sizing: border-box;\n  }\n\n  body {\n    background: var(--background-color) url(${githubBackground}) no-repeat 70% top;\n    -webkit-font-smoothing: antialiased;\n  }\n\n  body, input, button {\n    font: 16px Roboto, sans-serif;\n  }\n\n  #root {\n    max-width: 960px;\n    margin: 0 auto;\n    padding: 40px 20px;\n  }\n\n  button {\n    cursor: pointer;\n  }\n`;\n","import axios from 'axios';\n\nexport const api = axios.create({\n  baseURL: 'https://api.github.com',\n});\n","export default __webpack_public_path__ + \"static/media/logo.469cc31b.svg\";","import styled, { css } from 'styled-components';\n\ninterface FormProps {\n  hasError: boolean;\n}\n\nexport const Title = styled.h1`\n  font-size: 48px;\n  color: var(--darker-color);\n  max-width: 450px;\n  line-height: 56px;\n  margin-top: 80px;\n`;\n\nexport const Form = styled.form<FormProps>`\n  margin-top: 40px;\n  max-width: 700px;\n\n  display: flex;\n\n  input {\n    flex: 1;\n    height: 70px;\n    padding: 0 24px;\n    border: 0;\n    border-radius: 5px 0 0 5px;\n    color: var(--darker-color);\n    border: 2px solid var(--white-color);\n    border-right: 0;\n\n    ${props =>\n      props.hasError &&\n      css`\n        border-color: var(--error-color);\n      `}\n\n    &::placeholder {\n      color: var(--medium-color);\n    }\n  }\n\n  button {\n    width: 210px;\n    height: 70px;\n    background: var(--button-form-color);\n    border-radius: 0 5px 5px 0;\n    border: 0;\n    font-weight: bold;\n    transition: background-color 0.2s;\n\n    &:hover {\n      background: var(--button-form-color-hover);\n    }\n  }\n`;\n\nexport const Repositories = styled.div`\n  margin-top: 80px;\n  max-width: 700px;\n\n  a {\n    background: var(--white-color);\n    border-radius: 5px;\n    padding: 24px;\n    display: block;\n    text-decoration: none;\n\n    display: flex;\n    align-items: center;\n    transition: transform 0.2s;\n\n    & + a {\n      margin-top: 16px;\n    }\n\n    &:hover {\n      transform: translateX(10px);\n    }\n\n    img {\n      width: 64px;\n      height: 64px;\n      border-radius: 50%;\n    }\n\n    div {\n      margin: 0 16px;\n      flex: 1;\n\n      strong {\n        font-size: 20px;\n        color: var(--dark-color);\n      }\n\n      p {\n        font-size: 18px;\n        color: var(--medium-color);\n        margin-top: 4px;\n      }\n    }\n\n    svg {\n      margin-left: auto;\n      color: var(--light-color);\n    }\n  }\n`;\n\nexport const Error = styled.span`\n  display: block;\n  color: var(--error-color);\n  margin-top: 8px;\n`;\n","import React, { useState, useEffect, FormEvent } from 'react';\nimport { Link } from 'react-router-dom';\nimport { FiChevronRight } from 'react-icons/fi';\n\nimport { api } from '../../services/api';\n\nimport logoImg from '../../assets/logo.svg';\n\nimport { Title, Form, Repositories, Error } from './styles';\n\ninterface Repository {\n  full_name: string;\n  description: string;\n  owner: {\n    login: string;\n    avatar_url: string;\n  };\n}\n\nexport const Dashboard: React.FC = () => {\n  const [newRepo, setNewRepo] = useState('');\n  const [inputError, setInputError] = useState('');\n  const [repositories, setRepositories] = useState<Repository[]>(() => {\n    const storagedRepositories = localStorage.getItem(\n      '@GithubExplorer:repositories',\n    );\n\n    if (storagedRepositories) {\n      return JSON.parse(storagedRepositories);\n    }\n    return [];\n  });\n\n  useEffect(() => {\n    localStorage.setItem(\n      '@GithubExplorer:repositories',\n      JSON.stringify(repositories),\n    );\n  }, [repositories]);\n\n  async function handleAddRepository(\n    event: FormEvent<HTMLFormElement>,\n  ): Promise<void> {\n    event.preventDefault();\n    if (!newRepo) {\n      setInputError('Digite o autor/nome do reposit贸rio');\n      return;\n    }\n\n    try {\n      const response = await api.get<Repository>(`/repos/${newRepo}`);\n\n      const repository = response.data;\n\n      setRepositories([...repositories, repository]);\n      setNewRepo('');\n      setInputError('');\n    } catch (err) {\n      setInputError('Erro na busca por esse reposit贸rio');\n    }\n  }\n\n  return (\n    <>\n      <img src={logoImg} alt=\"Github Explorer\" />\n      <Title>Explore reposit贸rios no Github - test CI</Title>\n\n      <Form hasError={!!inputError} onSubmit={handleAddRepository}>\n        <input\n          value={newRepo}\n          onChange={event => setNewRepo(event.target.value)}\n          placeholder=\"Digite o nome do reposit贸rio\"\n          type=\"text\"\n        />\n        <button type=\"submit\">Pesquisar</button>\n      </Form>\n\n      {inputError && <Error>{inputError}</Error>}\n\n      <Repositories>\n        {repositories.map(repository => (\n          <Link\n            key={repository.full_name}\n            to={`/repositories/${repository.full_name}`}\n          >\n            <img\n              src={repository.owner.avatar_url}\n              alt={repository.owner.login}\n            />\n            <div>\n              <strong>{repository.full_name}</strong>\n              <p>{repository.description}</p>\n            </div>\n\n            <FiChevronRight size={20} />\n          </Link>\n        ))}\n      </Repositories>\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Header = styled.header`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  a {\n    display: flex;\n    align-items: center;\n    text-decoration: none;\n    color: var(--medium-color);\n    transition: color 0.2s;\n\n    &:hover {\n      color: #666;\n    }\n\n    svg {\n      margin-right: 4px;\n    }\n  }\n`;\n\nexport const RepositoryInfo = styled.section`\n  margin-top: 80px;\n\n  header {\n    display: flex;\n    align-items: center;\n\n    img {\n      width: 120px;\n      height: 120px;\n      border-radius: 50%;\n    }\n\n    div {\n      margin-left: 24px;\n\n      strong {\n        font-size: 36px;\n        color: #3d3d4d;\n      }\n\n      p {\n        font-size: 18px;\n        color: #737380;\n        margin-top: 4px;\n      }\n    }\n  }\n\n  ul {\n    display: flex;\n    list-style: none;\n    margin-top: 40px;\n\n    li {\n      & + li {\n        margin-left: 80px;\n      }\n\n      strong {\n        display: block;\n        font-size: 36px;\n        color: #3d3d4d;\n      }\n\n      span {\n        display: block;\n        margin-top: 4px;\n        color: #6c6c80;\n      }\n    }\n  }\n`;\n\nexport const Issues = styled.div`\n  margin-top: 80px;\n\n  a {\n    background: var(--white-color);\n    border-radius: 5px;\n    padding: 24px;\n    display: block;\n    text-decoration: none;\n\n    display: flex;\n    align-items: center;\n    transition: transform 0.2s;\n\n    & + a {\n      margin-top: 16px;\n    }\n\n    &:hover {\n      transform: translateX(10px);\n      box-shadow: 2px 4px 8px #0007;\n    }\n\n    div {\n      margin: 0 16px;\n      flex: 1;\n\n      strong {\n        font-size: 20px;\n        color: var(--dark-color);\n      }\n\n      p {\n        font-size: 18px;\n        color: var(--medium-color);\n        margin-top: 4px;\n      }\n    }\n\n    svg {\n      margin-left: auto;\n      color: var(--light-color);\n    }\n  }\n`;\n\ninterface LabelProps {\n  color: string;\n}\n\nexport const Label = styled.div<LabelProps>`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  max-width: 120px;\n  height: 55px;\n  border: 1px solid var(--medium-color);\n  box-shadow: 1px 2px 5px #0008;\n  border-radius: 5px;\n  background-color: ${props => `#${props.color}`};\n\n  span {\n    color: var(--darker-color);\n    font-weight: bold;\n    font-size: 0.8em;\n    max-width: 100px;\n  }\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useRouteMatch, Link } from 'react-router-dom';\nimport { FiChevronLeft, FiChevronRight } from 'react-icons/fi';\nimport { api } from '../../services/api';\n\nimport { Header, RepositoryInfo, Issues, Label } from './styles';\n\nimport logoImg from '../../assets/logo.svg';\n\ninterface RepositoryParams {\n  repository: string;\n}\n\ninterface Repository {\n  full_name: string;\n  description: string;\n  stargazers_count: number;\n  forks_count: number;\n  open_issues_count: number;\n  owner: {\n    login: string;\n    avatar_url: string;\n  };\n}\n\ninterface Issue {\n  id: number;\n  title: string;\n  html_url: string;\n  user: {\n    login: string;\n  };\n  labels: [\n    {\n      name: string;\n      color: string;\n    },\n  ];\n}\n\nexport const Repository: React.FC = () => {\n  // eslint-disable-next-line\n  const [repository, setRepository] = useState<Repository | null>(null);\n  const [issues, setIssues] = useState<Issue[]>([]);\n\n  const { params } = useRouteMatch<RepositoryParams>();\n\n  useEffect(() => {\n    api.get(`/repos/${params.repository}`).then(response => {\n      setRepository(response.data);\n    });\n\n    api.get(`/repos/${params.repository}/issues`).then(response => {\n      setIssues(response.data);\n    });\n  }, [params.repository]);\n\n  return (\n    <>\n      <Header>\n        <img src={logoImg} alt=\"Github Explorer\" />\n        <Link to=\"/\">\n          <FiChevronLeft size={16} />\n          Voltar\n        </Link>\n      </Header>\n\n      {repository ? (\n        <RepositoryInfo>\n          <header>\n            <img\n              src={repository.owner.avatar_url}\n              alt={repository.owner.login}\n            />\n            <div>\n              <strong>{repository.full_name}</strong>\n              <p>{repository.description}</p>\n            </div>\n          </header>\n          <ul>\n            <li>\n              <strong>{repository.stargazers_count}</strong>\n              <span>Starts</span>\n            </li>\n            <li>\n              <strong>{repository.forks_count}</strong>\n              <span>Forks</span>\n            </li>\n            <li>\n              <strong>{repository.open_issues_count}</strong>\n              <span>Issues abertas</span>\n            </li>\n          </ul>\n        </RepositoryInfo>\n      ) : (\n        <p>Carregando...</p>\n      )}\n\n      <Issues>\n        {issues.map(issue => (\n          <a key={issue.id} href={issue.html_url} target=\"__blank\">\n            <div>\n              <strong>{issue.title}</strong>\n              <p>{issue.user.login}</p>\n            </div>\n            {issue.labels.map(label => (\n              <Label color={label.color}>\n                <span>{label.name}</span>\n              </Label>\n            ))}\n            <FiChevronRight size={20} />\n          </a>\n        ))}\n      </Issues>\n    </>\n  );\n};\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport { Dashboard } from '../pages/Dashboard';\nimport { Repository } from '../pages/Repository';\n\nexport const Routes: React.FC = () => (\n  <Switch>\n    <Route path=\"/\" exact component={Dashboard} />\n    <Route path=\"/repositories/:repository+\" exact component={Repository} />\n  </Switch>\n);\n","import React from 'react';\nimport { HashRouter } from 'react-router-dom';\n\nimport GlobalStyle from './styles/global';\nimport { Routes } from './routes';\n\nexport const App: React.FC = () => (\n  <>\n    <GlobalStyle />\n    <HashRouter>\n      <Routes />\n    </HashRouter>\n  </>\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}